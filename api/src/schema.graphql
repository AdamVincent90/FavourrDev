type Category {
  id: ID!
  name: String
  icon: String
}

type Favourr {
  id: ID!
  title: String
  description: String
  byUser: String
  pre1: String
  pre2: String
  pre3: String
  pre4: String
}

type Student {
  id: ID!
  img: String
  firstname: String
  lastname: String
  email: String
  password: String
  profession: String
  bio: String
  likes: Int!
}

type Notification {
  id: ID!
  userRequested: String
  status: String
  favourrId: Int
}

type Social {
  id: ID!
  twitter: String
  linkedin: String
  facebook: String
}

type Message {
  id: ID!
  header: String
  body: String
  read: Boolean
  sender: String
  senderName: String
  receiver: String
}

type Review {
  id: ID!
  title: String
  description: String
  byUser: String
}

type Query {
  favourrByCat(catname: String): [Favourr]
    @cypher(
      statement: "MATCH (f:Favourr)<-[:CONTAINS]-(:Category {name: $catname}) RETURN f"
    )
  messagesToUser(email: String!): [Message]
    @cypher(
      statement: "MATCH (s:Student{email: $email})-[:RECEIVES]->(m:Message) RETURN m"
    )
  messagesFromUser(email: String!): [Message]
    @cypher(
      statement: "MATCH (s:Student)-[:SENDS]->(m:Message) WHERE s.email = $email RETURN m"
    )
  favourrNotifications(email: String): [Notification]
    @cypher(
      statement: "MATCH (s:Student{email: $email})-[:GETS]->(n:Notification)-[:FOR]->(f:Favourr) RETURN n"
    )
  studentByEmail(email: String): [Student]
    @cypher(statement: "MATCH (s:Student{email: $email}) RETURN s LIMIT 1")
  studentsLinked(email: String): [Student]
    @cypher(
      statement: "MATCH (s1{email: $email})-[:WORKING_WITH]-(s2:Student) RETURN s2"
    )
  studentById(sid: Int!): [Student]
    @cypher(statement: "MATCH (s:Student) WHERE id(s) = $sid RETURN s")
  getReviews(sid: Int): [Review]
    @cypher(
      statement: "MATCH (s:Student)-[:GETS]->(r:Review) WHERE id(s) = $sid RETURN  r"
    )
}

type Mutation {
  createReview(
    yourEmail: String
    theirEmail: String
    title: String
    message: String
  ): [Review]
    @cypher(
      statement: "MATCH (s1:Student{email: $yourEmail}), (s2:Student{email: $theirEmail}) MERGE (s1)-[:WRITES]->(r:Review{title: $title, message: $message, byUser: $yourEmail})<-[:GETS]-(s2) RETURN r"
    )
  createFavourr(
    catname: String
    email: String
    title: String
    description: String
    pre1: String
    pre2: String
    pre3: String
    pre4: String
  ): [Favourr]
    @cypher(
      statement: "MATCH (c:Category{name: $catname}), (s:Student{email: $email}) MERGE (c)-[:CONTAINS]->(f:Favourr{title: $title, description: $description, pre1: $pre1, pre2: $pre2, pre3: $pre3, pre4: $pre4, byUser: $email})<-[:CREATED]-(s) RETURN f"
    )
  createStudent(
    profession: String
    firstname: String
    lastname: String
    email: String
    bio: String
    password: String
  ): [Student]
    @cypher(
      statement: "MATCH (c:Category{name: $profession}) MERGE (c)<-[:SKILLED_IN]-(s:Student{firstname: $firstname, lastname: $lastname, email: $email, bio: $bio, password: $password, profession: $profession}) RETURN s"
    )
  sendMessage(
    emailSend: String
    emailReceive: String
    header: String
    body: String
    senderName: String
  ): [Message]
    @cypher(
      statement: "MATCH (s1:Student{email: $emailSend}), (s2:Student{email: emailReceive}) MERGE (s1)-[:SENDS]->(m:Message {header: $header, body: $body, read: FALSE, sender: $emailSend, receiver: $emailReceive, senderName: $senderName})<-[:RECEIVES]-(s2) RETURN m"
    )
  sendNotification(
    sender: String
    receiver: String
    fid: Int
    status: String
  ): [Notification]
    @cypher(
      statement: "MATCH (s1:Student{email: $sender}), (s2:Student{email: $receiver}), (f:Favourr) WHERE id(f) = $fid MERGE (s1)-[:REQUESTS]->(f)<-[:FOR]-(n:Notification{userRequested: $sender, status: $status, favourrId: $fid})<-[:GETS]-(s2) RETURN n"
    )
  linkStudent(yourEmail: String, theirEmail: String): [Student]
    @cypher(
      statement: "MATCH (s1:Student{email: $yourEmail}), (s2:Student{email: $theirEmail}) MERGE (s1)-[:WORKING_WITH]->(s2) RETURN s2"
    )
    respondNotification(
    yourEmail: String
    theirEmail: String
    nid: Int!
    fid: Int
    status: String
    ): [Notification]
    @cypher(
      statement: "MATCH (s1:Student{email: $yourEmail}), (s2:Student{email: $theirEmail}), (f:Favourr), (n:Notification) WHERE id(n) = $nid AND id(f) = $fid MERGE (s2)-[:GETS]->(n1:Notification{userRequested: $yourEmail, status: $status})-[:FOR]->(f)<-[:REQUESTS]-(s1) DETACH DELETE n RETURN n1"
      )
}
